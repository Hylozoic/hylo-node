scalar Date

# The currently logged-in person.
type Me {
  id: ID
  active: Boolean
  affiliations: AffiliationQuerySet
  avatarUrl: String
  bannerUrl: String
  bio: String
  blockedUsers: [Person]
  blockedUsersTotal: Int
  contactEmail: String
  contactPhone: String
  groups(first: Int, cursor: ID, order: String): [Membership]
  groupsTotal: Int
  groupInvitesPending: InvitationQuerySet
  email: String
  facebookUrl: String
  hasDevice: Boolean
  hasStripeAccount: Boolean
  intercomHash: String
  isAdmin: Boolean
  joinRequests(status: Int): JoinRequestQuerySet
  linkedinUrl: String
  location: String
  locationObject: Location
  memberships(first: Int, cursor: ID, order: String): [Membership]
  membershipsTotal: Int
  messageThreads(first: Int, offset: Int, order: String, sortBy: String): MessageThreadQuerySet
  messageThreadsTotal: Int
  name: String
  newNotificationCount: Int
  posts(first: Int, cursor: ID, order: String): [Post]
  postsTotal: Int
  settings: UserSettings
  skills(first: Int, cursor: ID): SkillQuerySet
  skillsToLearn(first: Int, cursor: ID): SkillQuerySet
  tagline: String
  twitterName: String
  unseenThreadCount: Int
  updatedAt: Date
  url: String
}

type UserSettings {
  alreadySeenTour: Boolean
  commentNotifications: String
  digestFrequency: String
  dmNotifications: String
  lastViewedMessagesAt: String
  signupInProgress: Boolean
  streamViewMode: String
  streamSortBy: String
  streamPostType: String
}

type GroupTopicQuerySet {
  total: Int
  hasMore: Boolean
  items: [GroupTopic]
}

type GroupTopic {
  id: ID
  topic: Topic
  group: Group
  postsTotal(groupSlug: String): Int
  followersTotal(groupSlug: String): Int
  isDefault: Boolean
  isSubscribed: Boolean
  newPostCount: Int
  visibility: Int
  updatedAt: Date
  createdAt: Date
}

type TopicQuerySet {
  total: Int
  hasMore: Boolean
  items: [Topic]
}

type Topic {
  id: ID
  name: String
  postsTotal(groupSlug: String): Int
  followersTotal(groupSlug: String): Int
  groupTopics(
    first: Int,
    offset: Int
    groupSlug: String,
    isDefault: Boolean,
    visibility: [Int]
  ): GroupTopicQuerySet
}

type Person {
  id: ID
  name: String
  avatarUrl: String
  bannerUrl: String
  bio: String
  contactEmail: String
  contactPhone: String
  twitterName: String
  linkedinUrl: String
  facebookUrl: String
  url: String
  lastActiveAt: String
  location: String
  locationObject: Location
  tagline: String
  affiliations: AffiliationQuerySet
  comments(first: Int, offset: Int, order: String): CommentQuerySet
  eventsAttending: PostQuerySet
  memberships(first: Int, cursor: ID, order: String): [Membership]
  membershipsTotal: Int
  moderatedGroupMemberships(first: Int, cursor: ID, order: String): [Membership]
  moderatedGroupMembershipsTotal: Int
  posts(
    afterTime: Date,
    beforeTime: Date,
    boundingBox: [PointInput],
    context: String,
    filter: String,
    first: Int,
    groupSlugs: [String],
    offset: Int,
    order: String,
    search: String,
    sortBy: String,
    topic: ID
  ): PostQuerySet
  projects: PostQuerySet
  skills(first: Int, cursor: ID): SkillQuerySet
  skillsToLearn(first: Int, cursor: ID): SkillQuerySet
  votes(first: Int, offset: Int, order: String): VoteQuerySet
  votesTotal: Int
  messageThreadId: ID
}

type Membership {
  id: ID
  role: Int
  hasModeratorRole: Boolean
  createdAt: Date
  lastViewedAt: String
  newPostCount: Int
  group: Group
  person: Person
  settings: MembershipSettings
}

type MembershipSettings {
  sendEmail: Boolean
  showJoinForm: Boolean
  sendPushNotifications: Boolean
}

type Group {
  id: ID
  accessibility: Int
  activeMembers(
    boundingBox: [PointInput],
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    autocomplete: String
  ): PersonQuerySet
  avatarUrl: String
  bannerUrl: String
  childGroups(
    boundingBox: [PointInput],
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    autocomplete: String
  ): GroupQuerySet
  createdAt: Date
  description: String
  groupRelationshipInvitesFrom: GroupRelationshipInviteQuerySet
  groupRelationshipInvitesTo: GroupRelationshipInviteQuerySet
  groupToGroupJoinQuestions: GroupToGroupJoinQuestionQuerySet
  groupTopics(
    first: Int,
    sortBy: String,
    order: String,
    offset: Int,
    autocomplete: String,
    isDefault: Boolean,
    subscribed: Boolean,
    visibility: Int
  ): GroupTopicQuerySet
  invitePath: String
  joinQuestions: GroupJoinQuestionQuerySet
  location: String
  locationObject: Location
  members(
    boundingBox: [PointInput],
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    autocomplete: String
  ): PersonQuerySet
  memberCount: Int
  moderators(first: Int, cursor: ID, order: String): PersonQuerySet
  name: String
  numPrerequisitesLeft: Int
  parentGroups(
    boundingBox: [PointInput],
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    autocomplete: String
  ): GroupQuerySet
  pendingInvitations(first: Int, cursor: ID, order: String): InvitationQuerySet
  prerequisiteGroups(onlyNotMember: Boolean): GroupQuerySet
  posts(
    afterTime: Date,
    beforeTime: Date,
    isAnnouncement: Boolean,
    isFulfilled: Boolean,
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    filter: String,
    topic: ID,
    boundingBox: [PointInput]
  ): PostQuerySet
  postCount: Int
  settings: GroupSettings
  skills(
    first: Int,
    offset: Int,
    autocomplete: String
  ): SkillQuerySet
  slug: String
  suggestedSkills: SkillQuerySet
  viewPosts(
    afterTime: Date,
    beforeTime: Date,
    boundingBox: [PointInput],
    filter: String,
    first: Int,
    offset: Int,
    order: String,
    search: String,
    sortBy: String,
    topic: ID
  ): PostQuerySet
  visibility: Int
  widgets: GroupWidgetQuerySet
}

type GroupSettings {
  allowGroupInvites: Boolean
  askGroupToGroupJoinQuestions: Boolean
  askJoinQuestions: Boolean
  publicMemberDirectory: Boolean
  showSuggestedSkills: Boolean
}

type GroupWidget {
  id: Int
  name: String
  isVisible: Boolean
  order: Int
  settings: GroupWidgetSettings
  group: Group
}

type GroupWidgetSettings {
  text: String
  title: String
}

type GroupWidgetQuerySet {
  total: Int
  hasMore: Boolean
  items: [GroupWidget]
}

type Widget {
  id: Int
  name: String
}

type GroupRelationship {
  id: ID
  childGroup: Group
  createdAt: Date
  parentGroup: Group
  role: Int
  settings: GroupRelationshipSettings
  updatedAt: Date
}

type GroupRelationshipSettings {
  isPrerequisite: Boolean
}

type GroupRelationshipInvite {
  id: ID
  createdAt: Date
  createdBy: Person
  fromGroup: Group
  questionAnswers: [JoinRequestQuestionAnswer]
  status: Int
  toGroup: Group
  type: Int
  updatedAt: Date
}

type PersonQuerySet {
  total: Int
  hasMore: Boolean
  items: [Person]
}

type Invitation {
  id: Int
  createdAt: Date
  creator: Person
  email: String
  error: String
  group: Group
  lastSentAt: Date
  token: String
}

type InvitationQuerySet {
  total: Int
  hasMore: Boolean
  items: [Invitation]
}

type JoinRequest {
  id: Int
  createdAt: Date
  group: Group
  questionAnswers: [JoinRequestQuestionAnswer]
  status: Int
  updatedAt: Date
  user: Person
}

type JoinRequestQuerySet {
  total: Int
  hasMore: Boolean
  items: [JoinRequest]
}

type JoinRequestQuestionAnswer {
  id: Int
  answer: String
  question: Question
  user: Person
}

type Question {
  id: Int
  text: String
}

type PostQuerySet {
  total: Int
  hasMore: Boolean
  items: [Post]
}

type FeedItem {
  type: String
  content: FeedItemContent
}

union FeedItemContent = Post | Interstitial

type Interstitial {
  text: String
}

type Post {
  id: ID
  title: String
  details: String
  detailsText: String
  type: String
  createdAt: Date
  updatedAt: Date
  fulfilledAt: Date
  startTime: Date
  endTime: Date
  location: String
  locationObject: Location
  isPublic: Boolean
  creator: Person
  followers(first: Int, cursor: ID, order: String): [Person]
  followersTotal: Int
  activeMembers(first: Int, cursor: ID, order: String): PersonQuerySet
  members(first: Int, cursor: ID, order: String): PersonQuerySet
  eventInvitations(first: Int, cursor: ID, order: String): EventInvitationQuerySet
  groups(first: Int, cursor: ID, order: String): [Group]
  groupsTotal: Int
  comments(first: Int, cursor: ID, order: String): CommentQuerySet
  commenters(first: Int): [Person]
  commentersTotal: Int
  commentsTotal: Int
  linkPreview: LinkPreview
  votesTotal: Int
  myVote: Boolean
  attachments(type: String): [Attachment]
  attachmentsTotal: Int
  postMemberships: [PostMembership]
  postMembershipsTotal: Int,
  topics: [Topic],
  topicsTotal: Int
  announcement: Boolean
  acceptContributions: Boolean
  totalContributions: Int
  myEventResponse: String
}

type PostMembership {
  id: ID
  pinned: Boolean
  group: Group
}

type PostUser {
  id: ID
  post: Post
  user: Person
}

type Attachment {
  id: ID
  type: String
  position: Int
  url: String
  thumbnailUrl: String
  createdAt: Date
}

type PersonConnection {
  id: ID
  person: Person
  type: String
  createdAt: Date
  updatedAt: Date
}

type PersonConnectionQuerySet {
  total: Int
  hasMore: Boolean
  items: [PersonConnection]
}

type CommentQuerySet {
  total: Int
  hasMore: Boolean
  items: [Comment]
}

type Comment {
  id: ID
  text: String
  creator: Person
  post: Post
  parentComment: Comment
  childComments(first: Int, cursor: ID, order: String): CommentQuerySet
  createdAt: Date
  createdFrom: String
  attachments(type: String): [Attachment]
  attachmentsTotal: Int
}

type Location {
  accuracy: String
  addressNumber: String
  addressStreet: String
  bbox: [Point]
  center: Point
  city: String
  country: String
  createdAt: Date
  fullText: String
  geometry: [Point]
  id: ID
  locality: String
  neighborhood: String
  region: String
  postcode: String
  updatedAt: Date
  wikidata: String
}

type Point {
  lat: String
  lng: String
}

union SearchResultContent = Person | Post | Comment

type SearchResult {
  id: ID
  content: SearchResultContent
}

type SearchResultQuerySet {
  total: Int
  hasMore: Boolean
  items: [SearchResult]
}

type EventInvitation {
  id: ID
  response: String
  person: Person
}

type EventInvitationQuerySet {
  total: Int
  hasMore: Boolean
  items: [EventInvitation]
}

type MessageThreadQuerySet {
  total: Int
  hasMore: Boolean
  items: [MessageThread]
}

type MessageThread {
  id: ID
  createdAt: Date
  updatedAt: Date
  participants(first: Int, cursor: ID, order: String): [Person]
  participantsTotal: Int
  messages(first: Int, cursor: ID, order: String): MessageQuerySet
  unreadCount: Int
  lastReadAt: String
}

type MessageQuerySet {
  total: Int
  hasMore: Boolean
  items: [Message]
}

type Message {
  id: ID
  text: String
  creator: Person
  messageThread: MessageThread
  createdAt: Date
}

type Vote {
  id: ID
  post: Post
  voter: Person
  createdAt: Date
}

type VoteQuerySet {
  total: Int
  hasMore: Boolean
  items: [Vote]
}

type GroupExistsOutput {
  exists: Boolean
}

type Query {
  activity(id: ID): Activity
  groupExists(slug: String): GroupExistsOutput
  me: Me
  person(id: ID): Person
  notifications(
    first: Int,
    order: String,
    offset: Int,
    resetCount: Boolean
  ): NotificationQuerySet
  group(id: ID, slug: String, updateLastViewed: Boolean): Group
  groups(
    autocomplete: String,
    boundingBox: [PointInput],
    context: String,
    filter: String,
    first: Int,
    groupIds: [ID],
    offset: Int,
    order: String,
    parentSlugs: [String],
    search: String,
    sortBy: String,
    visibility: Int
  ): GroupQuerySet
  joinRequests(groupId: ID, status: Int): JoinRequestQuerySet
  messageThread(id: ID): MessageThread
  post(id: ID): Post
  posts(
    afterTime: Date,
    beforeTime: Date,
    boundingBox: [PointInput],
    context: String
    filter: String,
    first: Int,
    groupSlugs: [String],
    offset: Int,
    order: String,
    search: String,
    sortBy: String,
    topic: ID,
  ): PostQuerySet
  comment(id: ID): Comment
  people(
    boundingBox: [PointInput],
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    autocomplete: String,
    groupIds: [String],
    filter: String
  ): PersonQuerySet
  topic(id: ID, name: String): Topic
  groupTopic(
    groupSlug: String,
    topicName: String
  ): GroupTopic
  topics(
    groupSlug: String,
    autocomplete: String,
    isDefault: Boolean,
    visibility: [Int],
    sortBy: String,
    first: Int,
    offset: Int
  ): TopicQuerySet
  connections(
    first: Int,
    offset: Int
  ): PersonConnectionQuerySet
  groupTopics(
    autocomplete: String,
    isDefault: Boolean,
    subscribed: Boolean,
    visibility: [Int],
    sortBy: String,
    order: String,
    first: Int,
    offset: Int
  ): GroupTopicQuerySet
  search(
    term: String,
    type: String,
    first: Int,
    offset: Int
  ): SearchResultQuerySet
  savedSearches(userId: ID): SavedSearchQuerySet
  skills(
    first: Int,
    offset: Int,
    autocomplete: String
  ): SkillQuerySet,
  checkInvitation(invitationToken: String, accessCode: String): CheckInvitationResult
}

input AffiliationInput {
  role: String
  preposition: String
  orgName: String
  url: String
}

input AttachmentInput {
  url: String
  attachmentType: String
}

input MeInput {
  name: String
  email: String
  avatarUrl: String
  bannerUrl: String
  bio: String
  contactEmail: String
  contactPhone: String
  twitterName: String
  linkedinUrl: String
  facebookUrl: String
  location: String
  locationId: ID
  tagline: String
  password: String
  settings: UserSettingsInput
  newNotificationCount: Int
  url: String
}

input PostInput {
  title: String
  details: String
  type: String
  groupIds: [String]
  linkPreviewId: String
  isPublic: Boolean
  location: String
  locationId: ID
  imageUrls: [String]
  fileUrls: [String]
  announcement: Boolean
  topicNames: [String]
  memberIds: [ID]
  acceptContributions: Boolean
  eventInviteeIds: [ID]
  startTime: Date
  endTime: Date
}

input CommentInput {
  text: String
  postId: String
  parentCommentId: String
  attachments: [AttachmentInput]
}

input MessageInput {
  text: String
  messageThreadId: String
  createdAt: Date
}

input MessageThreadInput {
  participantIds: [String]
}

input LinkPreviewInput {
  url: String
}

input LocationInput {
  accuracy: String
  addressNumber: String
  addressStreet: String
  bbox: [PointInput]
  center: PointInput
  city: String
  country: String
  createdAt: Date
  fullText: String
  geometry: [PointInput]
  lat: String
  lng: String
  locality: String
  neighborhood: String
  region: String
  postcode: String
  updatedAt: Date
  wikidata: String
}

input PointInput {
  lat: Float
  lng: Float
}

input MembershipInput {
  newPostCount: Int
  settings: MembershipSettingsInput
}

input GroupTopicInput {
  isDefault: Boolean
  visibility: Int
}

input GroupTopicFollowInput {
  newPostCount: Int
}

input InviteInput {
  emails: [String]
  message: String
}

input GroupInput {
  accessibility: Int
  active: Boolean
  avatarUrl: String
  bannerUrl: String
  description: String
  groupToGroupJoinQuestions: [QuestionInput]
  joinQuestions: [QuestionInput]
  location: String
  locationId: ID
  name: String
  parentIds: [ID]
  prerequisiteGroupIds: [ID]
  settings: GroupSettingsInput
  slackHookUrl: String
  slackTeam: String
  slackConfigureUrl: String
  slug: String
  visibility: Int
}

input GroupSettingsInput {
  allowGroupInvites: Boolean
  askGroupToGroupJoinQuestions: Boolean
  askJoinQuestions: Boolean
  publicMemberDirectory: Boolean
  showSuggestedSkills: Boolean
}

input QuestionInput {
  id: Int
  questionId: Int
  text: String
}

input MembershipSettingsInput {
  sendEmail: Boolean
  showJoinForm: Boolean
  sendPushNotifications: Boolean
}

input QuestionAnswerInput {
  questionId: Int
  answer: String
}

input SavedSearchInput {
  boundingBox: [PointInput]
  groupSlug: String
  context: String
  lastPostId: ID
  name: String
  postTypes: [String]
  searchText: String
  topicIds: [ID]
  userId: ID
}

input UserSettingsInput {
  alreadySeenTour: Boolean
  commentNotifications: String
  digestFrequency: String
  dmNotifications: String
  lastViewedMessagesAt: String
  signupInProgress: Boolean
  streamViewMode: String
  streamSortBy: String
  streamPostType: String
}

input GroupWidgetInput {
  isVisible: Boolean
  settings: GroupWidgetSettingsInput
}

input GroupWidgetSettingsInput {
  text: String
  title: String
}

type Mutation {
  acceptGroupRelationshipInvite(groupRelationshipInviteId: ID): AcceptGroupRelationshipInviteResult
  acceptJoinRequest(joinRequestId: ID): JoinRequest
  addModerator(personId: ID, groupId: ID): Group
  addPeopleToProjectRole(peopleIds: [ID], projectRoleId: ID): GenericResult
  addSkill(name: String, type: Int): Skill
  addSkillToLearn(name: String): Skill
  addSuggestedSkillToGroup(groupId: ID, name: String): Skill
  allowGroupInvites(groupId: ID, data: Boolean): Group
  blockUser(blockedUserId: ID): GenericResult
  cancelGroupRelationshipInvite(groupRelationshipInviteId: ID): GenericResult
  cancelJoinRequest(joinRequestId: ID): GenericResult
  createAffiliation(data: AffiliationInput): Affiliation
  createComment(data: CommentInput): Comment
  createGroup(data: GroupInput): Membership
  createInvitation(groupId: ID, data: InviteInput): CreatedInvitations
  createJoinRequest(groupId: ID, questionAnswers: [QuestionAnswerInput]): CreatedRequest
  createMessage(data: MessageInput): Message
  createPost(data: PostInput): Post
  createProject(data: PostInput): Post
  createProjectRole(projectId: ID, roleName: String): GenericResult
  createSavedSearch(data: SavedSearchInput): SavedSearch
  createTopic(topicName: String, groupId: ID, isDefault: Boolean, isSubscribing: Boolean): Topic
  deactivateMe(id: ID): GenericResult
  deleteMe: GenericResult
  declineJoinRequest(joinRequestId: ID): JoinRequest
  deleteAffiliation(id: ID): ID
  deleteComment(id: ID): GenericResult
  deleteGroup(id: ID): GenericResult
  deleteGroupRelationship(parentId: ID, childId: ID): GenericResult
  deleteGroupTopic(id: ID): GenericResult
  deletePost(id: ID): GenericResult
  deleteProjectRole(id: ID): GenericResult
  deleteSavedSearch(id: ID): ID
  expireInvitation(invitationId: ID): GenericResult
  findOrCreateLinkPreviewByUrl(data: LinkPreviewInput): LinkPreview
  findOrCreateLocation(data: LocationInput): Location
  findOrCreateThread(data: MessageThreadInput): MessageThread
  flagInappropriateContent(data: InappropriateContentInput): GenericResult
  fulfillPost(postId: ID): GenericResult
  inviteGroupToJoinParent(parentId: ID, childId: ID): CreatedGroupRelationshipInvite
  invitePeopleToEvent(eventId: ID, inviteeIds: [ID]): Post
  joinGroup(groupId: ID): Membership
  joinProject(id: ID): GenericResult
  leaveGroup(id: ID): ID
  leaveProject(id: ID): GenericResult
  markActivityRead(id: ID): Activity
  markAllActivitiesRead: GenericResult
  pinPost(postId: ID, groupId: ID): GenericResult
  processStripeToken(postId: ID, token: String, amount: Int): GenericResult
  reactivateMe(id: ID): GenericResult
  regenerateAccessCode(groupId: ID): Group
  registerDevice(playerId: String, platform: String, version: String): GenericResult
  reinviteAll(groupId: ID): GenericResult
  registerStripeAccount(authorizationCode: String): GenericResult
  rejectGroupRelationshipInvite(groupRelationshipInviteId: ID): GenericResult
  removeMember(personId: ID, groupId: ID): Group
  removeModerator(personId: ID, groupId: ID, isRemoveFromGroup: Boolean): Group
  removePost(postId: ID, slug: String, groupId: ID): GenericResult
  removeSkill(id: ID, name: String): GenericResult
  removeSkillToLearn(id: ID, name: String): GenericResult
  removeSuggestedSkillFromGroup(groupId: ID, id: ID, name: String): GenericResult
  requestToAddGroupToParent(parentId: ID, childId: ID, questionAnswers: [QuestionAnswerInput]): CreatedGroupRelationshipInvite
  resendInvitation(invitationId: ID): GenericResult
  respondToEvent(id: ID, response: String): GenericResult
  subscribe(groupId: ID, topicId: ID, isSubscribing: Boolean): GenericResult
  unlinkAccount(provider: String): GenericResult
  unblockUser(blockedUserId: ID): GenericResult
  unfulfillPost(postId: ID): GenericResult
  updateComment(id: ID, data: CommentInput): Comment
  updateGroupSettings(id: ID, changes: GroupInput): Group
  updateGroupTopic(id: ID, data: GroupTopicInput): GenericResult
  updateGroupTopicFollow(id: ID, data: GroupTopicFollowInput): GenericResult
  updateMe(changes: MeInput): Me
  updateMembership(groupId: ID, slug: String, data: MembershipInput): Membership
  updatePost(id: ID, data: PostInput): Post
  updateStripeAccount(accountId: String): GenericResult
  updateWidget(id: ID, changes: GroupWidgetInput): GroupWidget
  useInvitation(invitationToken: String, accessCode: String): InvitationUseResult
  vote(postId: ID, isUpvote: Boolean): Post
}

type InvitationUseResult {
  membership: Membership
  error: String
}

type GenericResult {
  success: Boolean
}

type LinkPreview {
  id: ID
  url: String
  imageUrl: String
  title: String
  description: String
  imageWidth: String
  imageHeight: String
  status: String
}

type CreatedInvitations {
  invitations: [Invitation]
}

type CheckInvitationResult {
  valid: Boolean
}

type CreatedRequest {
  request: JoinRequest
}

type AcceptGroupRelationshipInviteResult {
  success: Boolean
  groupRelationship: GroupRelationship
}

type CreatedGroupRelationshipInvite {
  success: Boolean
  groupRelationship: GroupRelationship
  groupRelationshipInvite: GroupRelationshipInvite
}

type Notification {
  id: ID
  activity: Activity
  createdAt: Date
}

type ActivityMeta {
  reasons: [String]
}

type Activity {
  id: ID
  actor: Person
  comment: Comment
  post: Post
  group: Group
  otherGroup: Group
  action: String
  meta: ActivityMeta
  unread: Boolean
  contributionAmount: Int
}

type NotificationQuerySet {
  total: Int
  hasMore: Boolean
  items: [Notification]
}

type GroupQuerySet {
  total: Int
  hasMore: Boolean
  items: [Group]
}

type GroupJoinQuestion {
  id: Int
  questionId: Int
  text: String
}

type GroupJoinQuestionQuerySet {
  total: Int
  hasMore: Boolean
  items: [GroupJoinQuestion]
}

type GroupToGroupJoinQuestion {
  id: Int
  questionId: Int
  text: String
}

type GroupToGroupJoinQuestionQuerySet {
  total: Int
  hasMore: Boolean
  items: [GroupToGroupJoinQuestion]
}

type GroupRelationshipInviteQuerySet {
  total: Int
  hasMore: Boolean
  items: [GroupRelationshipInvite]
}

type Skill {
  id: ID
  name: String
}

type SkillQuerySet {
  total: Int
  hasMore: Boolean
  items: [Skill]
}

type SavedSearch {
  id: ID
  name: String
  boundingBox: [Float]
  group: Group
  context: String
  isActive: Boolean
  searchText: String
  topics: [SavedSearchTopic]
  postTypes: [String]
  newPosts: [Post]
  createdAt: Date
}

type SavedSearchTopic {
  id: ID
  name: String
}

type SavedSearchQuerySet {
  total: Int
  hasMore: Boolean
  items: [SavedSearch]
}

type Affiliation {
  id: ID
  user: Person
  role: String
  preposition: String
  orgName: String
  url: String
  isActive: Boolean
  createdAt: Date
  updatedAt: Date
}

type AffiliationQuerySet {
  total: Int
  hasMore: Boolean
  items: [Affiliation]
}

input InappropriateContentInput {
  category: String,
  reason: String,
  linkData: LinkDataInput
}

input LinkDataInput {
  id: ID
  slug: String
  type: String
}
