# The currently logged-in person.
type Me {
  id: ID
  avatarUrl: String
  bannerUrl: String
  bio: String
  communities(first: Int, cursor: ID, order: String): [Membership]
  communitiesTotal: Int
  email: String
  facebookUrl: String
  hasDevice: Boolean
  isAdmin: Boolean
  linkedinUrl: String
  location: String
  memberships(first: Int, cursor: ID, order: String): [Membership]
  membershipsTotal: Int
  messageThreads(first: Int, offset: Int, order: String, sortBy: String): MessageThreadQuerySet
  messageThreadsTotal: Int
  name: String
  newNotificationCount: Int
  posts(first: Int, cursor: ID, order: String): [Post]
  postsTotal: Int
  settings: UserSettings
  skills(first: Int, cursor: ID): SkillQuerySet
  tagline: String
  twitterName: String
  unseenThreadCount: Int
  updatedAt: String
  url: String
  intercomHash: String
}

type UserSettings {
  digestFrequency: String
  dmNotifications: String
  commentNotifications: String
  signupInProgress: Boolean
  lastViewedMessagesAt: String
}

type CommunityTopicQuerySet {
  total: Int
  hasMore: Boolean
  items: [CommunityTopic]
}

type CommunityTopic {
  id: ID
  topic: Topic
  community: Community
  postsTotal: Int
  followersTotal: Int
  isSubscribed: Boolean
  newPostCount: Int
  updatedAt: String
  createdAt: String
}

type TopicQuerySet {
  total: Int
  hasMore: Boolean
  items: [Topic]
}

type Topic {
  id: ID
  name: String
  postsTotal: Int
  followersTotal: Int
  communityTopics(
    first: Int,
    offset: Int
  ): CommunityTopicQuerySet
}

type Person {
  id: ID
  name: String
  avatarUrl: String
  bannerUrl: String
  bio: String
  twitterName: String
  linkedinUrl: String
  facebookUrl: String
  url: String
  location: String
  tagline: String
  comments(first: Int, offset: Int, order: String): CommentQuerySet
  memberships(first: Int, cursor: ID, order: String): [Membership]
  membershipsTotal: Int
  posts(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    filter: String,
    topic: ID
  ): PostQuerySet
  skills(first: Int, cursor: ID): SkillQuerySet
  votes(first: Int, offset: Int, order: String): VoteQuerySet
  votesTotal: Int
  messageThreadId: ID
}

type Membership {
  id: ID
  role: Int
  hasModeratorRole: Boolean
  createdAt: String
  lastViewedAt: String
  newPostCount: Int
  community: Community
  settings: MembershipSettings
}

type MembershipSettings {
  sendPushNotifications: Boolean
  sendEmail: Boolean
}

type Community {
  id: ID
  name: String
  slug: String
  description: String
  createdAt: String
  avatarUrl: String
  bannerUrl: String
  location: String
  settings: String
  invitePath: String
  network: Network
  numMembers: Int
  hidden: Boolean
  members(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    autocomplete: String
  ): PersonQuerySet
  posts(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    filter: String,
    topic: ID
  ): PostQuerySet
  memberCount: Int
  postCount: Int
  feedItems(first: Int, cursor: ID, order: String): [FeedItem]
  feedItemsTotal: Int
  moderators(first: Int, cursor: ID, order: String): PersonQuerySet
  pendingInvitations(first: Int, cursor: ID, order: String): InvitationQuerySet
  communityTopics(
    first: Int,
    sortBy: String,
    order: String,
    offset: Int,
    autocomplete: String,
    subscribed: Boolean
  ): CommunityTopicQuerySet
  skills(
    first: Int,
    offset: Int,
    autocomplete: String
  ): SkillQuerySet,
  allowCommunityInvites: Boolean
}

type PersonQuerySet {
  total: Int
  hasMore: Boolean
  items: [Person]
}

type Invitation {
  id: Int
  email: String
  createdAt: String
  lastSentAt: String
  error: String
}
type InvitationQuerySet {
  total: Int
  hasMore: Boolean
  items: [Invitation]
}

type PostQuerySet {
  total: Int
  hasMore: Boolean
  items: [Post]
}

type FeedItem {
  type: String
  content: FeedItemContent
}

union FeedItemContent = Post | Interstitial

type Interstitial {
  text: String
}

type Post {
  id: ID
  title: String
  details: String
  detailsText: String
  type: String
  createdAt: String
  updatedAt: String
  public: Boolean
  fulfilledAt: String
  startsAt: String
  endsAt: String
  location: String
  creator: Person
  followers(first: Int, cursor: ID, order: String): [Person]
  followersTotal: Int
  communities(first: Int, cursor: ID, order: String): [Community]
  communitiesTotal: Int
  comments(first: Int, cursor: ID, order: String): CommentQuerySet
  commenters(first: Int): [Person]
  commentersTotal: Int
  commentsTotal: Int
  linkPreview: LinkPreview
  votesTotal: Int
  myVote: Boolean
  attachments(type: String): [Attachment]
  attachmentsTotal: Int
  postMemberships: [PostMembership]
  postMembershipsTotal: Int,
  topics: [Topic],
  topicsTotal: Int
  announcement: Boolean
}

type PostMembership {
  id: ID
  pinned: Boolean
  community: Community
}

type Attachment {
  id: ID
  type: String
  position: Int
  url: String
  thumbnailUrl: String
  createdAt: String
}

type PersonConnection {
  id: ID
  person: Person
  type: String
  createdAt: String
  updatedAt: String
}

type PersonConnectionQuerySet {
  total: Int
  hasMore: Boolean
  items: [PersonConnection]
}

type CommentQuerySet {
  total: Int
  hasMore: Boolean
  items: [Comment]
}

type Comment {
  id: ID
  text: String
  creator: Person
  post: Post
  createdAt: String
  createdFrom: String
  attachments(type: String): [Attachment]
  attachmentsTotal: Int
}

union SearchResultContent = Person | Post | Comment

type SearchResult {
  id: ID
  content: SearchResultContent
}

type SearchResultQuerySet {
  total: Int
  hasMore: Boolean
  items: [SearchResult]
}

type MessageThreadQuerySet {
  total: Int
  hasMore: Boolean
  items: [MessageThread]
}

type MessageThread {
  id: ID
  createdAt: String
  updatedAt: String
  participants(first: Int, cursor: ID, order: String): [Person]
  participantsTotal: Int
  messages(first: Int, cursor: ID, order: String): MessageQuerySet
  unreadCount: Int
  lastReadAt: String
}

type MessageQuerySet {
  total: Int
  hasMore: Boolean
  items: [Message]
}

type Message {
  id: ID
  text: String
  creator: Person
  messageThread: MessageThread
  createdAt: String
}

type Vote {
  id: ID
  post: Post
  voter: Person
  createdAt: String
}

type VoteQuerySet {
  total: Int
  hasMore: Boolean
  items: [Vote]
}

type CommunityExistsOutput {
  exists: Boolean
}

type Query {
  communityExists(slug: String): CommunityExistsOutput
  me: Me
  person(id: ID): Person
  notifications(
    first: Int,
    order: String,
    offset: Int,
    resetCount: Boolean
  ): NotificationQuerySet
  community(id: ID, slug: String, updateLastViewed: Boolean): Community
  communities(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    autocomplete: String,
    filter: String
  ): CommunityQuerySet
  messageThread(id: ID): MessageThread
  post(id: ID): Post
  posts(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    filter: String,
    topic: ID
  ): PostQuerySet
  people(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    autocomplete: String,
    filter: String
  ): PersonQuerySet
  topic(id: ID, name: String): Topic
  communityTopic(topicName: String, communitySlug: String): CommunityTopic
  topics(
    first: Int,
    offset: Int,
    autocomplete: String,
    name: String
  ): TopicQuerySet
  connections(
    first: Int,
    offset: Int
  ): PersonConnectionQuerySet
  communityTopics(
    first: Int,
    sortBy: String,
    order: String,
    offset: Int,
    autocomplete: String,
    subscribed: Boolean
  ): CommunityTopicQuerySet
  search(
    term: String,
    type: String,
    first: Int,
    offset: Int
  ): SearchResultQuerySet
  network(id: ID, slug: String): Network
  skills(
    first: Int,
    offset: Int,
    autocomplete: String
  ): SkillQuerySet,
  checkInvitation(invitationToken: String, accessCode: String): CheckInvitationResult
}

input MeInput {
  name: String
  email: String
  avatarUrl: String
  bannerUrl: String
  bio: String
  url: String
  twitterName: String
  linkedinUrl: String
  facebookUrl: String
  location: String
  tagline: String
  password: String
  settings: UserSettingsInput
  newNotificationCount: Int
}

input PostInput {
  title: String
  details: String
  type: String
  communityIds: [String]
  linkPreviewId: String
  public: Boolean
  startsAt: String
  endsAt: String
  location: String
  imageUrls: [String]
  fileUrls: [String]
  announcement: Boolean
  topicNames: [String]
}

input CommentInput {
  text: String
  imageUrl: String
  postId: String
  parentCommentId: String
}

input MessageInput {
  text: String
  messageThreadId: String
}

input MessageThreadInput {
  participantIds: [String]
}

input LinkPreviewInput {
  url: String
}

input MembershipInput {
  newPostCount: Int
  settings: MembershipSettingsInput
}

input CommunityTopicInput {
  newPostCount: Int
}

input InviteInput {
  emails: [String]
  message: String
}

input CommunityInput {
  name: String
  slug: String
  description: String
  location: String
  bannerUrl: String
  avatarUrl: String
  settings: CommunitySettingsInput
  slackHookUrl: String
  slackTeam: String
  slackConfigureUrl: String
  active: Boolean
  hidden: Boolean
  networkId: ID
}

input CommunitySettingsInput {
  checklist: Boolean
}

input MembershipSettingsInput {
  sendEmail: Boolean
  sendPushNotifications: Boolean
}

input NetworkInput {
  id: ID
  slug: String
  name: String
  description: String
  avatarUrl: String
  bannerUrl: String
  communityIds: [String]
  moderatorIds: [String]
}

input UserSettingsInput {
  digestFrequency: String
  dmNotifications: String
  commentNotifications: String
  signupInProgress: Boolean
  lastViewedMessagesAt: String
}

type Mutation {
  addCommunityToNetwork(communityId: ID, networkId: ID): Network
  addModerator(personId: ID, communityId: ID): Community
  addNetworkModeratorRole(personId: ID, networkId: ID): Network
  addSkill(name: String): Skill
  allowCommunityInvites(communityId: ID, data: Boolean): Community
  createComment(data: CommentInput): Comment
  createCommunity(data: CommunityInput): Membership
  createInvitation(communityId: ID, data: InviteInput): CreatedInvitations
  createMessage(data: MessageInput): Message
  createPost(data: PostInput): Post
  createProject(data: PostInput): Post
  createProjectRole(projectId: ID, roleName: String): GenericResult
  createTopic(topicName: String, communityId: ID): Topic
  deleteComment(id: ID): GenericResult
  deleteCommunityTopic(id: ID): GenericResult
  deletePost(id: ID): GenericResult
  deleteProjectRole(id: ID): GenericResult
  expireInvitation(invitationId: ID): GenericResult
  findOrCreateLinkPreviewByUrl(data: LinkPreviewInput): LinkPreview
  findOrCreateThread(data: MessageThreadInput): MessageThread
  flagInappropriateContent(data: InappropriateContentInput): GenericResult
  leaveCommunity(id: ID): ID
  markActivityRead(id: ID): Activity
  markAllActivitiesRead: GenericResult
  pinPost(postId: ID, communityId: ID): GenericResult
  regenerateAccessCode(communityId: ID): Community
  registerDevice(playerId: String, platform: String, version: String): GenericResult
  reinviteAll(communityId: ID): GenericResult
  removeCommunityFromNetwork(communityId: ID, networkId: ID): Network
  removeMember(personId: ID, communityId: ID): Community
  removeModerator(personId: ID, communityId: ID, isRemoveFromCommunity: Boolean): Community
  removeNetworkModeratorRole(personId: ID, networkId: ID): Network
  removePost(postId: ID, slug: String, communityId: ID): GenericResult
  removeSkill(id: ID, name: String): GenericResult
  resendInvitation(invitationId: ID): GenericResult
  subscribe(communityId: ID, topicId: ID, isSubscribing: Boolean): GenericResult
  unlinkAccount(provider: String): GenericResult
  updateComment(id: ID, data: CommentInput): Comment
  updateCommunitySettings(id: ID, changes: CommunityInput): Community
  updateCommunityHiddenSetting(id: ID, hidden: Boolean): Community
  updateCommunityTopic(id: ID, data: CommunityTopicInput): GenericResult
  updateMe(changes: MeInput): Me
  updateMembership(communityId: ID, slug: String, data: MembershipInput): Membership
  updateNetwork(id: ID, data: NetworkInput): Network
  updatePost(id: ID, data: PostInput): Post
  useInvitation(userId: ID, invitationToken: String, accessCode: String): InvitationUseResult,
  vote(postId: ID, isUpvote: Boolean): Post
}

type InvitationUseResult {
  membership: Membership
  error: String
}

type GenericResult {
  success: Boolean
}

type LinkPreview {
  id: ID
  url: String
  imageUrl: String
  title: String
  description: String
  imageWidth: String
  imageHeight: String
  status: String
}

type CreatedInvitations {
  invitations: [Invitation]
}

type CheckInvitationResult {
  valid: Boolean
}

type Notification {
  id: ID
  activity: Activity
  createdAt: String
}

type ActivityMeta {
  reasons: [String]
}

type Activity {
  id: ID
  actor: Person
  comment: Comment
  post: Post
  community: Community
  action: String
  meta: ActivityMeta
  unread: Boolean
}

type NotificationQuerySet {
  total: Int
  hasMore: Boolean
  items: [Notification]
}

type Network {
  id: ID
  slug: String
  name: String
  description: String
  avatarUrl: String
  bannerUrl: String
  createdAt: String
  memberCount: Int
  communities(first: Int, offset: Int, order: String, sortBy: String, search: String): CommunityQuerySet
  members(first: Int, offset: Int, order: String, sortBy: String, search: String): PersonQuerySet
  moderators(first: Int, offset: Int, order: String, sortBy: String): PersonQuerySet
  isModerator: Boolean
  isAdmin: Boolean
  posts(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    filter: String,
    topic: ID
  ): PostQuerySet
}

type CommunityQuerySet {
  total: Int
  hasMore: Boolean
  items: [Community]
}

type Skill {
  id: ID
  name: String
}

type SkillQuerySet {
  total: Int
  hasMore: Boolean
  items: [Skill]
}

input InappropriateContentInput {
  category: String,
  reason: String,
  linkData: LinkDataInput
}

input LinkDataInput {
  id: ID
  slug: String
  type: String
}
