# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2
jobs:
  build:
    working_directory: ~/Hylozoic/hylo-node
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    # In CircleCI 1.0 we used a pre-configured image with a large number of languages and other packages.
    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # We have selected a pre-built image that mirrors the build environment we use on
    # the 1.0 platform, but we recommend you choose an image more tailored to the needs
    # of each job. For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
    - image: cimg/node:16.13.2
    - image: circleci/postgres:13.4-postgis-ram
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: hylo
        POSTGRES_DB: hylo_test
    - image: redis
    steps:
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - checkout
    # setup self referential env vars
    - run: echo $HOME
    - run: echo $CIRCLE_PROJECT_REPONAME
    - run: echo $PATH
    - run:
        name: Update PATH Environment Variable at Runtime
        command: |
          export PATH=$PATH:$HOME/$CIRCLE_PROJECT_REPONAME/node_modules/.bin
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: echo 'echoing env vars'
    - run: echo $CIRCLE_ARTIFACTS
    - run: echo $CIRCLE_TEST_REPORTS
    - run: echo `node --version`
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # # This is based on your 1.0 configuration file or project settings
    # - run:
    #     working_directory: ~/Hylozoic/hylo-node
    #     command: nvm install && nvm alias default `node --version`
    # # Upgrade yarn
    # - run: curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
    # - run: sudo sh -c 'echo "deb https://dl.yarnpkg.com/debian/ stable main" >> /etc/apt/sources.list.d/yarn.list'
    # - run: sudo apt update
    # - run: sudo apt install yarn
    # - run: curl -o- -L https://yarnpkg.com/install.sh | bash
    # Dependencies
    # #   This would typically go in either a build or a build-and-test job when using workflows
    # # Restore the dependency cache
    # - restore_cache:
    #     keys:
    #     # This branch if available
    #     - v1-dep-{{ .Branch }}-
    #     # Default branch if not
    #     - v1-dep-dev-
    #     # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
    #     - v1-dep-
    # This is based on your 1.0 configuration file or project settings
    - run: yarn install -g codecov
    # This is based on your 1.0 configuration file or project settings
    - run: yarn config set unsafe-perm true && yarn
    # # Save dependency cache
    # - save_cache:
    #     key: v1-dep-{{ .Branch }}-{{ epoch }}
    #     paths:
    #     # This is a broad list of cache paths to include many possible development environments
    #     # You can probably delete some of these entries
    #     - vendor/bundle
    #     - ~/virtualenvs
    #     - ~/.m2
    #     - ~/.ivy2
    #     - ~/.bundle
    #     - ~/.go_workspace
    #     - ~/.gradle
    #     - ~/.cache/bower
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run: yarn cover --forbid-only
    # This is based on your 1.0 configuration file or project settings
    - run: codecov
    # Deployment
    # Your existing circle.yml file contains deployment steps.
    # The config translation tool does not support translating deployment steps
    # since deployment in CircleCI 2.0 are better handled through workflows.
    # See the documentation for more information https://circleci.com/docs/2.0/workflows/
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: coverage
    - store_artifacts:
        path: /tmp/circleci-test-results
  # deploy:
  #   docker:
  #     - image: buildpack-deps:trusty
  #   steps:
  #     - checkout
  #     - run:
  #         name: Deploy Master to Heroku
  #         command: |
  #           git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      # - deploy:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: master
